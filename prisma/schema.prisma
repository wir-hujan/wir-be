// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Test {
  id        Int      @id @default(autoincrement())
  name      String
  username  String   @unique
  createdAt DateTime @default(now()) @db.Timestamp(6)
}

model Employee {
  id          Int       @id @default(autoincrement())
  name        String
  username    String    @unique
  password    String
  isActive    Boolean
  token       String?
  loginDevice String?
  expiredAt   DateTime?
  roleId      Int
  role        Role      @relation(fields: [roleId], references: [id])
  store_id    Int
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  created_by  Int?
  updated_at  DateTime? @default(now()) @updatedAt
  updated_by  Int?
  deleted_at  DateTime?
  deleted_by  Int?

  EmployeeAccess EmployeeAccess[]

  @@map("employee")
}

model Role {
  id         Int        @id @default(autoincrement())
  name       String
  Employee   Employee[]
  isActive   Boolean
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  created_by Int?
  updated_at DateTime?  @default(now()) @updatedAt
  updated_by Int?
  deleted_at DateTime?
  deleted_by Int?

  @@map("role")
}

model Store {
  id          Int       @id @default(autoincrement())
  name        String
  province_id Int
  city_id     Int
  location    String    @db.Text
  isActive    Boolean
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  created_by  Int?
  updated_at  DateTime? @default(now()) @updatedAt
  updated_by  Int?
  deleted_at  DateTime?
  deleted_by  Int?

  ProductInformation ProductInformation[]
  Market             Market[]

  @@map("store")
}

model Market {
  id         Int       @id @default(autoincrement())
  name       String
  store_id   Int
  isActive   Boolean
  store      Store     @relation(fields: [store_id], references: [id])
  created_at DateTime? @default(now()) @db.Timestamp(6)
  created_by Int?
  updated_at DateTime? @default(now()) @updatedAt
  updated_by Int?
  deleted_at DateTime?
  deleted_by Int?

  ProductMarket ProductMarket[]

  @@map("market")
}

model ProductMarket {
  id         Int       @id @default(autoincrement())
  price      Int
  market_id  Int
  market     Market    @relation(fields: [market_id], references: [id])
  product_id Int
  product    Product   @relation(fields: [product_id], references: [id])
  isActive   Boolean
  created_at DateTime? @default(now()) @db.Timestamp(6)
  created_by Int?
  updated_at DateTime? @default(now()) @updatedAt
  updated_by Int?
  deleted_at DateTime?
  deleted_by Int?

  @@map("productmarket")
}

model Product {
  id   Int    @id @default(autoincrement())
  name String
  code String @unique

  //! enum
  type       String
  unit_id    Int
  unit       Unit      @relation(fields: [unit_id], references: [id])
  isActive   Boolean
  created_at DateTime? @default(now()) @db.Timestamp(6)
  created_by Int?
  updated_at DateTime? @default(now()) @updatedAt
  updated_by Int?
  deleted_at DateTime?
  deleted_by Int?

  ProductInformation ProductInformation[]
  ProductMarket      ProductMarket[]

  @@map("product")
}

model Unit {
  id         Int       @id @default(autoincrement())
  name       String
  isActive   Boolean
  created_at DateTime? @default(now()) @db.Timestamp(6)
  created_by Int?
  updated_at DateTime? @default(now()) @updatedAt
  updated_by Int?

  Product Product[]

  @@map("unit")
}

model ProductInformation {
  id         Int       @id @default(autoincrement())
  product_id Int
  store_id   Int
  product    Product   @relation(fields: [product_id], references: [id])
  store      Store     @relation(fields: [store_id], references: [id])
  isActive   Boolean
  price      Int
  stock      Int
  discount   Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  created_by Int?
  updated_at DateTime? @default(now()) @updatedAt
  updated_by Int?
  deleted_at DateTime?
  deleted_by Int?

  @@map("productinformation")
}

model Module {
  id         Int       @id @default(autoincrement())
  name       String
  isActive   Boolean
  created_at DateTime? @default(now()) @db.Timestamp(6)
  created_by Int?
  updated_at DateTime? @default(now()) @updatedAt
  updated_by Int?
  deleted_at DateTime?
  deleted_by Int?

  @@map("module")
}

model Submodule {
  id         Int       @id @default(autoincrement())
  name       String
  url        String    @db.Text
  module_id  Int
  isActive   Boolean
  created_at DateTime? @default(now()) @db.Timestamp(6)
  created_by Int?
  updated_at DateTime? @default(now()) @updatedAt
  updated_by Int?
  deleted_at DateTime?
  deleted_by Int?

  @@map("submodule")
}

model EmployeeAccess {
  id           Int       @id @default(autoincrement())
  submodule_id Int
  employee_id  Int
  employee     Employee  @relation(fields: [employee_id], references: [id])
  isActive     Boolean
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  created_by   Int?
  updated_at   DateTime? @default(now()) @updatedAt
  updated_by   Int?
  deleted_at   DateTime?
  deleted_by   Int?

  @@map("employeeaccess")
}
