// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Test {
  id        Int      @id @default(autoincrement())
  name      String
  username  String   @unique
  createdAt DateTime @default(now()) @db.Timestamp(6)
}

model Employee {
  id          Int       @id @default(autoincrement())
  name        String
  username    String    @unique
  password    String
  isActive    Boolean
  token       String?
  loginDevice String?
  expiredAt   DateTime?
  roleId      Int
  role        Role      @relation(fields: [roleId], references: [id])
  store_id    Int
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  createdBy   Int?
  updatedAt   DateTime? @default(now()) @updatedAt
  updatedBy   Int?
  deletedAt   DateTime?
  deletedBy   Int?

  EmployeeAccess EmployeeAccess[]
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String
  Employee  Employee[]
  createdAt DateTime   @default(now()) @db.Timestamp(6)
  createdBy Int
  updatedAt DateTime   @default(now()) @updatedAt
  updatedBy Int
  deletedAt DateTime?
  deletedBy Int?
}

model Store {
  id         Int       @id @default(autoincrement())
  name       String
  provinceId Int
  cityId     Int
  location   String    @db.Text
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  createdBy  Int
  updatedAt  DateTime  @default(now()) @updatedAt
  updatedBy  Int
  deletedAt  DateTime?
  deletedBy  Int?

  ProductInformation ProductInformation[]
  Market             Market[]
}

model Market {
  id        Int       @id @default(autoincrement())
  name      String
  storeId   Int
  store     Store     @relation(fields: [storeId], references: [id])
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  createdBy Int
  updatedAt DateTime  @default(now()) @updatedAt
  updatedBy Int
  deletedAt DateTime?
  deletedBy Int?

  ProductMarket ProductMarket[]
}

model ProductMarket {
  id        Int       @id @default(autoincrement())
  price     Int
  marketId  Int
  market    Market    @relation(fields: [marketId], references: [id])
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  createdBy Int
  updatedAt DateTime  @default(now()) @updatedAt
  updatedBy Int
  deletedAt DateTime?
  deletedBy Int?
}

model Product {
  id   Int    @id @default(autoincrement())
  name String
  code String @unique

  //! enum
  type      String
  unitId    Int
  unit      Unit      @relation(fields: [unitId], references: [id])
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  createdBy Int
  updatedAt DateTime  @default(now()) @updatedAt
  updatedBy Int
  deletedAt DateTime?
  deletedBy Int?

  ProductInformation ProductInformation[]
}

model Unit {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  createdBy Int
  updatedAt DateTime @default(now()) @updatedAt
  updatedBy Int

  Product Product[]
}

model ProductInformation {
  id        Int       @id @default(autoincrement())
  productId Int
  storeId   Int
  product   Product   @relation(fields: [productId], references: [id])
  store     Store     @relation(fields: [storeId], references: [id])
  isActive  Boolean
  price     Int
  stock     Int
  discount  Int
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  createdBy Int
  updatedAt DateTime  @default(now()) @updatedAt
  updatedBy Int
  deletedAt DateTime?
  deletedBy Int?
}

model Module {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  createdBy Int
  updatedAt DateTime  @default(now()) @updatedAt
  updatedBy Int
  deletedAt DateTime?
  deletedBy Int?

  Submodule Submodule[]
}

model Submodule {
  id        Int       @id @default(autoincrement())
  name      String
  url       String    @db.Text
  moduleId  Int
  module    Module    @relation(fields: [moduleId], references: [id])
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  createdBy Int
  updatedAt DateTime  @default(now()) @updatedAt
  updatedBy Int
  deletedAt DateTime?
  deletedBy Int?

  EmployeeAccess EmployeeAccess[]
}

model EmployeeAccess {
  id          Int       @id @default(autoincrement())
  submoduleId Int
  employeeId  Int
  submodule   Submodule @relation(fields: [submoduleId], references: [id])
  employee    Employee  @relation(fields: [employeeId], references: [id])
}
